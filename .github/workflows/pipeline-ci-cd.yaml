name: 'Terraform Build DevOps01-Project'

# This workflow will run when there is a push or a pull request to the 'main' branch.
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  # Terraform job for setting up AWS resources
  terraform:
    name: 'TF GitHub Actions DevOps01-Project'
    runs-on: ubuntu-latest # Specifies the runner environment to use
    environment: production
    
    # Specifies default settings for the shell in all run steps in this job.
    defaults:
      run:
        shell: bash
    
    steps:
    # Checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
    - name: Checkout
      uses: actions/checkout@v4
      
    # Assume the AWS Role to perform AWS actions.
    - name: Configure AWS Credentials by Assume Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-central-1 # Frankfurt, Germany
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions

    # Sets up Terraform CLI in the runner environment.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest # Uses the latest version of Terraform
        
    # Initializes Terraform in the working directory.
    - name: Terraform Init
      run: terraform init
      
    # Checks whether the configuration has been properly formatted, and fails if itâ€™s not.
    - name: Terraform Format
      run: terraform fmt -check
      
    # Validates the Terraform configuration in pull requests.
    - name: Terraform Validate
      if: github.event_name == 'pull_request'
      run: terraform validate -no-color

    # Generates and shows the execution plan (not executed).
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -lock=false
      continue-on-error: true # Continues to the next step even if this step fails.
      
    # Checks the status of the Terraform Plan step, fails the workflow if the Plan step failed.
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        echo "Terraform Plan Failed."
        exit 1
        
    # Applies the Terraform configuration to AWS, creating/modifying the resources.
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Only applies in push events to the 'main' branch
      run: terraform apply -auto-approve

  # Deploy job for deploying Docker container to the AWS EC2 instance
  deploy:
    runs-on: ubuntu-latest
    needs: [terraform]

    steps:
    # Checks out your repository under $GITHUB_WORKSPACE.
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    # Sets up the SSH key to connect to the EC2 instance.
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Pull Docker Image
      run: docker pull bitnami/moodle:latest
    
    # Check if a previous container is running
    - name: Check Running Containers
      run: |
        CONTAINER_ID=$(ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP_ADDRESS }} 'docker ps -q --filter "ancestor=bitnami/moodle:latest"')
        echo "CONTAINER_ID=$CONTAINER_ID" >> $GITHUB_ENV
      
    # If a container is running, stop and remove it
    - name: Stop and Remove Running Containers
      if: env.CONTAINER_ID != ''
      run: |
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP_ADDRESS }} "docker stop $CONTAINER_ID && docker rm $CONTAINER_ID"
        
    # Deploy the new container
    - name: Deploy Docker Container
      run: ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP_ADDRESS }} 'docker run -d -p 80:80 bitnami/moodle:latest'
