name: 'Terraform Build DevOps01-Project'
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
jobs:

  #Determines the type of machine to run the job on
  terraform:
    name: 'TF GitHub Actions DevOps01-Project'
    runs-on: ubuntu-latest
    
    #The environment that the job references
    environment: production
    
    #Define default shell and working-directory options for all run steps in a workflow
    defaults:
      run:
        shell: bash
    
    steps:

    #Checks out repository under $GITHUB_WORKSPACE, so your workflow can access it
    - name: Checkout
      uses: actions/checkout@v2

    #Is a JavaScript action that sets up Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest
        
    #To ensure access to the AWS Cloud environment we must configure and in the runner environment.
    - name: Configure AWS Credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_REGION=us-east-1" >> $GITHUB_ENV

    #We can now configure Terraform commands
    - name: Terraform Init
      id: init
      run: |
        terraform init

    #Checks whether the configuration has been properly formatted
    #It will throw an error if the configuration isn't properly formatted
    - name: Terraform Format
      id: fmt
      run: |
        terraform fmt -check
      env:
        TF_ACTION_WORKING_DIR: .
      continue-on-error: true

    #Validates the configuration used in the GitHub action workflow
    - name: Terraform Validate
      id: validate
      run: |
        terraform validate -no-color

    #Generates a Terraform plan
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        exit 1

    #Applies the configuration when a commit is pushed to 'main'
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve

#This will create an environment variable called TF_OUTPUTS that will contain all of the outputs from your Terraform plan
env:
  TF_OUTPUTS: ${{ steps.terraform.outputs.* }}


